
docker network create main

#== animal == 
    cd animal
    docker stop animal; docker rm animal ; docker rmi animal
    rm  utils ; cp -r ../utils/ .
    docker build -t animal . 
    docker run  -d --network=main --add-host=host.docker.internal:host-gateway --name animal animal
    rm -rf utils ; ln -s ../utils utils
    cd ..
#== litter == 
    cd litter
    docker stop litter; docker rm litter ; docker rmi litter
    rm  utils ; cp -r ../utils/ .
    docker build -t litter . 
    docker run  -d --network=main --add-host=host.docker.internal:host-gateway --name litter litter
    rm -rf utils ; ln -s ../utils utils
    cd ..
#== notification == 
    cd notification
    docker stop notification; docker rm notification ; docker rmi notification
    rm  utils ; cp -r ../utils/ .
    docker build -t notification . 
    docker run  -d --network=main --add-host=host.docker.internal:host-gateway --name notification notification
    rm -rf utils ; ln -s ../utils utils
    cd ..
#== versioning == 
    cd versioning
    docker stop versioning; docker rm versioning ; docker rmi versioning
    rm  utils ; cp -r ../utils/ .
    docker build -t versioning . 
    docker run  -d  --network=main --add-host=host.docker.internal:host-gateway --name versioning versioning
    rm -rf utils ; ln -s ../utils utils
    cd ..
#== queueprocessor == 
    cd queueprocessor
    docker stop queueprocessor; docker rm queueprocessor ; docker rmi queueprocessor
    rm  utils ; cp -r ../utils/ .
    docker build -t queueprocessor . 
    docker run  -d --network=main --add-host=host.docker.internal:host-gateway --name queueprocessor queueprocessor
    rm -rf utils ; ln -s ../utils utils
    cd ..
#== dispatcher == 
    cd dispatcher
    docker stop dispatcher; docker rm dispatcher ; docker rmi dispatcher
    python generateNginxConf.py
    rm  utils ; cp -r ../utils/ .
    docker build -t dispatcher . 
    docker run  -d -p 80:80 --network=main --add-host=host.docker.internal:host-gateway --name dispatcher dispatcher
    rm -rf utils ; ln -s ../utils utils
    cd ..
    


== utils ==
go to docker bash
    docker exec -it <container> bash
check docker log
    docker logs -f <container>

build zip <file> include <folder>
    zip -r <file> <folder> 

dump file system: 
    docker export -o <File>.tar <container>

== start locally ==
    fastapi run app/server.py --reload --port 2000


== network ==
see networks
    docker network ls 
create network
    docker network create <NAME>
delete network 
    docker network rm <NAME>
see network containers
    docker network inspect <NETWORKNAME> -f "{{json .Containers}}"
connect container into network 
    docker netowrk connect <NETWORK> <CONTAINER>
disconnect container from network 
    docker netowrk disconnect <NETWORK> <CONTAINER>    
check network container is on 
    docker inspect container -f "{{json .NetworkSettings.Networks }}"